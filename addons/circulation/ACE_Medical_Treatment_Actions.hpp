class ACE_Medical_Treatment_Actions {
    class BasicBandage;
    class FieldDressing;
    class ApplyTourniquet;
    class RemoveTourniquet;
    class Morphine;
    class CheckPulse;
    class CPR;

    class BloodIV: BasicBandage {
        allowedSelections[] = {"Body", "LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        condition = QUOTE(_patient getVariable [ARR_2(QQGVAR(IVplaced), true)]) && QFUNC(removeIV);
    };
    class Epinephrine: Morphine {
        callbackSuccess = "[_medic, _patient, _bodyPart, _className, _itemUser, _usedItem] call ace_medical_treatment_fnc_medication; [_medic, _patient, -0.15] call aceP_circulation_fnc_alphaAction;";
    };
    class Painkillers: Morphine {
        displayName = CSTRING(Inject_Box_Painkillers);
        displayNameProgress = CSTRING(Using);
        allowedSelections[] = {"Head"};
        items[] = {};
        callbackSuccess = QUOTE([ARR_5('kat_Painkiller', _medic, _patient, _bodyPart, 'Painkillers')] call FUNC(removeItemfromMag));
        condition = "[_medic, 'kat_Painkiller'] call ace_common_fnc_hasMagazine || [_patient, 'kat_Painkiller'] call ace_common_fnc_hasMagazine";
        litter[] = {};
        icon = QPATHTOF(ui\icon_painkillers_action.paa);
        animationPatient = "";
        animationPatientUnconscious = "AinjPpneMstpSnonWrflDnon_rolltoback";
        animationPatientUnconsciousExcludeOn[] = {"ainjppnemstpsnonwrfldnon"};
    };
    class Carbonate: Morphine {
        displayName = CSTRING(Take_Carbonate);
        displayNameProgress = CSTRING(Using);
        category = "medication";
        treatmentLocations = 0;
        allowedSelections[] = {"Head"};
        allowSelfTreatment = 1;
        medicRequired = 1;
        treatmentTime = 5;
        items[] = {};
        condition = "[_medic, 'kat_Carbonate'] call ace_common_fnc_hasMagazine || [_patient, 'kat_Carbonate'] call ace_common_fnc_hasMagazine";
        patientStateCondition = 0;
        callbackSuccess = QUOTE([ARR_3(_player, _patient, 'Carbonate')] call FUNC(treatmentAdvanced_Carbonate));
        animationMedic = "AinvPknlMstpSnonWrflDnon_medic1";
        animationMedicProne = "AinvPpneMstpSlayWpstDnon_medicOther";
        animationPatient = "";
        animationPatientUnconscious = "AinjPpneMstpSnonWrflDnon_rolltoback";
        animationPatientUnconsciousExcludeOn[] = {"ainjppnemstpsnonwrfldnon"};
    };
    class Naloxone: Carbonate {
        displayName = CSTRING(Take_Naloxone);
        allowedSelections[] = {"Head"};
        allowSelfTreatment = 1;
        medicRequired = 1;
        treatmentTime = 5;
        items[] = {"kat_naloxone"};
        condition = QGVAR(naloxoneActive);
        patientStateCondition = 0;
        callbackSuccess = QUOTE([ARR_3(_player, _patient, 'Naloxone')] call FUNC(treatmentAdvanced_Naloxone));
    };
    class TXA: Carbonate {
        displayName = CSTRING(Take_TXA);
        allowedSelections[] = {"Body", "LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        allowSelfTreatment = 1;
        medicRequired = 1;
        treatmentTime = QGVAR(PushTime);
        items[] = {"kat_TXA"};
        condition = QFUNC(removeIV);
        patientStateCondition = 0;
        callbackSuccess = "[_medic, _patient] call aceP_circulation_fnc_treatmentAdvanced_TXA; [_medic, _patient, _bodyPart, _className, _itemUser, _usedItem] call ace_medical_treatment_fnc_medication;";
    };
    class EACA: Carbonate {
        displayName = CSTRING(Take_EACA);
        allowedSelections[] = {"Body", "LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        allowSelfTreatment = 1;
        medicRequired = 1;
        treatmentTime = QGVAR(PushTime);
        items[] = {"kat_EACA"};
        condition = QFUNC(removeIV);
        patientStateCondition = 0;
        callbackSuccess = "[_medic, _patient] call aceP_circulation_fnc_treatmentAdvanced_EACA; [_medic, _patient, _bodyPart, _className, _itemUser, _usedItem] call ace_medical_treatment_fnc_medication;";
    };
    class Saline_Flush: Carbonate {
        displayName = "Saline Flush";
        allowedSelections[] = {"Body", "LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        allowSelfTreatment = 1;
        medicRequired = 1;
        treatmentTime = 3;
        items[] = {};
        condition = QUOTE(_patient getVariable [ARR_2(QQGVAR(IVplaced), true)]) && QFUNC(salineCheck);
        patientStateCondition = 0;
        callbackSuccess = QUOTE([ARR_2(_player, _patient)] call FUNC(treatmentAdvanced_Flush));
    };
    class Inspect: Carbonate {
        displayName = "Inspect Catheter";
        category = "examine";
        allowedSelections[] = {"Body", "LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        allowSelfTreatment = 1;
        medicRequired = 1;
        treatmentTime = 2;
        items[] = {};
        condition = QFUNC(removeIV);
        patientStateCondition = 0;
        callbackSuccess = QUOTE([ARR_2(_player, _patient)] call FUNC(inspectCatheter));
        animationMedic = "";
        animationMedicProne = "";
    };
    class BreathCheck: Carbonate {
        displayName = "Check Breath";
        category = "examine";
        allowedSelections[] = {"Head"};
        allowSelfTreatment = 1;
        medicRequired = 1;
        treatmentTime = 2;
        items[] = {};
        condition = true;
        patientStateCondition = 0;
        callbackSuccess = QUOTE([ARR_2(_player, _patient)] call FUNC(inspectBreath));
        animationMedic = "";
        animationMedicProne = "";
    };
    class Norepinephrine: Carbonate {
        displayName = CSTRING(Take_Norep);
        allowedSelections[] = {"Body", "LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        allowSelfTreatment = 1;
        medicRequired = 1;
        treatmentTime = QGVAR(PushTime);
        items[] = {"kat_norepinephrine"};
        condition = QFUNC(removeIV);
        patientStateCondition = 0;
        callbackSuccess = "[_medic, _patient, _bodyPart, _className, _itemUser, _usedItem] call ace_medical_treatment_fnc_medication; [_medic, _patient, -0.3] call aceP_circulation_fnc_alphaAction;";
    };
    class Phenylephrine: Carbonate {
        displayName = CSTRING(Take_Phenyl);
        allowedSelections[] = {"Body", "LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        allowSelfTreatment = 1;
        medicRequired = 1;
        treatmentTime = QGVAR(PushTime);
        items[] = {"kat_phenylephrine"};
        condition = QFUNC(removeIV);
        patientStateCondition = 0;
        callbackSuccess = "[_medic, _patient, _bodyPart, _className, _itemUser, _usedItem] call ace_medical_treatment_fnc_medication; [_medic, _patient, -0.5] call aceP_circulation_fnc_alphaAction;";
    };
    class Nitroglycerin: Carbonate {
        displayName = CSTRING(Take_Nitro);
        allowedSelections[] = {"Body", "LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        allowSelfTreatment = 1;
        medicRequired = 1;
        treatmentTime = QGVAR(PushTime);
        items[] = {"kat_nitroglycerin"};
        condition = QFUNC(removeIV);
        patientStateCondition = 0;
        callbackSuccess = "[_medic, _patient, _bodyPart, _className, _itemUser, _usedItem] call ace_medical_treatment_fnc_medication; [_medic, _patient, 0.3] call aceP_circulation_fnc_alphaAction;";
    };
    class Reorientation: Carbonate {
        displayName = CSTRING(Take_Reorient);
        displayNameProgress = CSTRING(Reorienting);
        allowedSelections[] = {"Head"};
        allowSelfTreatment = 0;
        medicRequired = 1;
        treatmentTime = 1;
        items[] = {};
        condition = QUOTE(!([_patient] call ace_common_fnc_isAwake));
        patientStateCondition = 0;
        callbackSuccess = QUOTE([ARR_2(_player, _patient)] call FUNC(treatmentAdvanced_Reorientation));
        animationMedic = "AwopPknlMstpSgthWrflDnon_End";
        animationMedicProne = "AwopPpneMstpSgthWnonDnon_Fast_End";
    };
    class CheckBloodPressure: CheckPulse { // Remove the ability to check blood pressure at the head
        allowedSelections[] = {"LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        animationPatient = "";
        animationMedic = "AinvPknlMstpSnonWrflDr_medic4_old";
        animationMedicProne = "AinvPknlMstpSnonWrflDr_medic4_old";
        animationPatientUnconscious = "AinjPpneMstpSnonWrflDnon_rolltoback";
        animationPatientUnconsciousExcludeOn[] = {"ainjppnemstpsnonwrfldnon"};
    };
    class ApplyIV: ApplyTourniquet {
        displayName = CSTRING(Apply_IV_16);
        displayNameProgress = CSTRING(Applying_IV);
        medicRequired = QGVAR(IVmedic);
        category = "advanced";
        allowedSelections[] = {"LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        items[] = {"kat_IV_16"};
        condition = QUOTE(!(_patient getVariable [ARR_2(QQGVAR(IVplaced), false)])) && QFUNC(checkIV);
        treatmentTime = QGVAR(IVestablish);
        callbackSuccess = QFUNC(applyIV);
        litter[] = {};
    };
    class ApplyIO: ApplyIV {
        displayName = CSTRING(Apply_IO_45);
        displayNameProgress = CSTRING(Applying_IV);
        medicRequired = QGVAR(IVmedic);
        category = "advanced";
        allowedSelections[] = {"Body"};
        items[] = {"kat_IO_FAST"};
        condition = QUOTE(!(_patient getVariable [ARR_2(QQGVAR(IVplaced), false)]));
        treatmentTime = QGVAR(IOestablish);
        callbackSuccess = QFUNC(applyIV);
        litter[] = {};
    };
    class RemoveIV: ApplyTourniquet {
        displayName = CSTRING(Remove_IV);
        displayNameProgress = CSTRING(Removing_IV);
        allowedSelections[] = {"Body", "LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        treatmentTime = 3;
        items[] = {};
        condition = QFUNC(removeIV);
        callbackSuccess = QFUNC(retrieveIV);
    };
    class Defibrillator: CPR {
        displayName = CSTRING(Defib_Action_Use);
        displayNameProgress = "$STR_ACEP_circulation_AED_PROGRESS";
        icon = QPATHTOF(ui\defib.paa);
        items[] = {"kat_AED"};
        treatmentTime = 10;
        callbackStart = "call ace_medical_treatment_fnc_cprStart; _patient setVariable ['aceP_AEDinUse', true, true];";
        callbackProgress = "call ace_medical_treatment_fnc_cprProgress; call aceP_circulation_fnc_AED_sound;";
        callbackSuccess = "[_medic, _patient, 'AED'] call aceP_circulation_fnc_AEDSuccess; _patient setVariable ['aceP_AEDinUse', false, true];";
        callbackFailure = "call ace_medical_treatment_fnc_cprFailure; _medic setVariable ['aceP_soundplayed', false, true]; _patient setVariable ['aceP_AEDinUse', false, true];";
        animationMedic = "AinvPknlMstpSnonWnonDr_medic0";
        treatmentLocations = "GVAR(useLocation_AED)";
        medicRequired = 1;
        animationPatient = "";
        animationPatientUnconscious = "AinjPpneMstpSnonWrflDnon_rolltoback";
        animationPatientUnconsciousExcludeOn[] = {"ainjppnemstpsnonwrfldnon"};
    };
    class Defibrillator_station: Defibrillator {
        displayName = CSTRING(DefibS_Action_Use);
        items[] = {};
        callbackSuccess = "[_medic, _patient, 'AED-Station'] call aceP_circulation_fnc_AEDSuccess; _patient setVariable ['aceP_AEDinUse', false, true];";
        condition = "aceP_circulation_fnc_AEDStationCondition";
        treatmentLocations = 0;
    };
    class Defibrillator_AED_X: Defibrillator {
        displayName = CSTRING(AED_X_Action_Use);
        displayNameProgress = CSTRING(AED_X_Action_Progress);
        items[] = {};
        callbackSuccess = "[_medic, _patient, 'AED-X'] call aceP_circulation_fnc_AEDSuccess; _patient setVariable ['aceP_AEDinUse', false, true];";
        //condition = QUOTE((_patient getVariable [ARR_2(QQGVAR(X), false)]) || [ARR_2(_medic, 'kat_AED')] call ace_common_fnc_hasItem || [ARR_2(_medic, 'kat_X_AED')] call ace_common_fnc_hasItem);
        condition = "aceP_circulation_fnc_AEDXCondition";
        medicRequired = QGVAR(medLvl_AED_X);
        icon = QPATHTOF(ui\X_Series-Device_W.paa);
    };
    class X_Defibrillator_AED_X: Defibrillator_AED_X {
        displayName = CSTRING(X_Action_Use);
        displayNameProgress = CSTRING(X_Action_Progress);
        items[] = {"kat_X_AED"};
        condition = QUOTE(!(_patient getVariable [ARR_2(QQGVAR(X), false)])) && QUOTE(!(_patient getVariable [ARR_2(QQGVAR(vehicleTrue), false)]));
        consumeItem = 1;
        medicRequired = QGVAR(medLvl_AED_X);
        callbackProgress = "";
        callbackStart = "";
        callbackFailure = "";
        callbackSuccess = QFUNC(treatmentAdvanced_X);
        icon = QPATHTOF(ui\X_Series-Device_W.paa);
    };
    class Remove_X_Defibrillator: Defibrillator_AED_X {
        displayName = CSTRING(X_Action_Remove);
        displayNameProgress = CSTRING(X_Remove_Action_Progress);
        items[] = {};
        condition = QUOTE(_patient getVariable [ARR_2(QQGVAR(X), true)]) && QUOTE(!(_patient getVariable [ARR_2(QQGVAR(vehicleTrue), false)]));
        treatmentTime = 2;
        medicRequired = 0;
        callbackProgress = "";
        callbackStart = "";
        callbackFailure = "";
        callbackSuccess = QUOTE([ARR_3(_medic, _patient, true)] call FUNC(returnAED_X));
        icon = QPATHTOF(ui\X_Series-Device_W.paa);
    };
    class Defibrillator_AED_X_vehicle: Defibrillator {
        displayName = CSTRING(Vehicle_Action_Use);
        displayNameProgress = CSTRING(AED_X_Action_Progress);
        items[] = {};
        callbackSuccess = "[_medic, _patient, 'AED-X'] call aceP_circulation_fnc_AEDSuccess; _patient setVariable ['aceP_AEDinUse', false, true];";
        //condition = QUOTE((_patient getVariable [ARR_2(QQGVAR(X), false)]) || [ARR_2(_medic, 'kat_AED')] call ace_common_fnc_hasItem || [ARR_2(_medic, 'kat_X_AED')] call ace_common_fnc_hasItem);
        condition = QUOTE(_patient getVariable [ARR_2(QQGVAR(vehicleTrue), true)]) && QFUNC(vehicleCheck);
        medicRequired = QGVAR(medLvl_AED_X);
        treatmentLocations = 0;
        icon = QPATHTOF(ui\X_Series-Device_W.paa);
    };
    class X_Defibrillator_AED_X_vehicle: Defibrillator_AED_X_vehicle {
        displayName = CSTRING(AED_Vehicle_Action_Use);
        displayNameProgress = CSTRING(X_Action_Progress);
        items[] = {};
        condition = QUOTE(!(_patient getVariable [ARR_2(QQGVAR(X), false)])) && QFUNC(vehicleCheck);
        consumeItem = 0;
        medicRequired = QGVAR(medLvl_AED_X);
        callbackProgress = "";
        callbackStart = "";
        callbackFailure = "";
        callbackSuccess = QFUNC(treatmentAdvanced_X_Vehicle);
        icon = QPATHTOF(ui\X_Series-Device_W.paa);
    };
    class Remove_X_Defibrillator_vehicle: Defibrillator_AED_X_vehicle {
        displayName = CSTRING(Vehicle_Action_Remove);
        displayNameProgress = CSTRING(X_Remove_Action_Progress);
        items[] = {};
        condition = QUOTE(_patient getVariable [ARR_2(QQGVAR(vehicleTrue), true)]) && QFUNC(vehicleCheck);
        treatmentTime = 2;
        medicRequired = 0;
        callbackProgress = "";
        callbackStart = "";
        callbackFailure = "";
        callbackSuccess = QUOTE([ARR_3(_medic, _patient, false)] call FUNC(returnAED_X));
        icon = QPATHTOF(ui\X_Series-Device_W.paa);
    };
    class Dialysis: Defibrillator_AED_X_vehicle {
        displayName = "Perform Dialysis";
        displayNameProgress = "Performing";
        items[] = {};
        condition = QFUNC(vehicleCheckDialysis);
        treatmentTime = 15;
        medicRequired = 1;
        callbackProgress = "";
        callbackStart = "";
        callbackFailure = "";
        callbackSuccess = QUOTE([ARR_2(_medic, _patient)] call FUNC(treatmentAdvanced_Dialysis));
        icon = QPATHTOF(ui\X_Series-Device_W.paa);
    };
    class CheckFracture: CheckPulse {
        displayName = "Check Fracture";
        displayNameProgress = "Checking Fracture";
        category = "examine";
        treatmentLocations = 0;
        allowedSelections[] = {"LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        allowSelfTreatment = 1;
        medicRequired = QGVAR(fractureCheck);
        treatmentTime = 5;
        items[] = {};
        condition = QUOTE(([ARR_4(_medic, _patient, _bodyPart, 5)] call FUNC(fractureCheck)) && (GVAR(enable_fracture)));
        patientStateCondition = 0;
        callbackSuccess = QUOTE([ARR_3(_medic, _patient, _bodyPart)] call FUNC(fractureSelect));
    };
    class ClosedReduction: CheckFracture {
        displayName = "Perform Closed Reduction";
        displayNameProgress = "Performing Reduction";
        category = "surgery";
        treatmentLocations = QGVAR(closedLocation);
        allowedSelections[] = {"LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        allowSelfTreatment = 0;
        medicRequired = QGVAR(closedReduction);
        treatmentTime = QGVAR(closedTime);
        items[] = {};
        condition = QUOTE([ARR_4(_medic, _patient, _bodyPart, 1)] call FUNC(fractureCheck));
        patientStateCondition = 0;
        callbackSuccess = QUOTE([ARR_3(_medic, _patient, _bodyPart)] call FUNC(closedFracture));
    };
    class OpenReduction: CheckFracture {
        displayName = "Perform Open Reduction";
        displayNameProgress = "Performing Reduction";
        category = "surgery";
        treatmentLocations = QGVAR(surgicalLocation);
        allowedSelections[] = {"LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        allowSelfTreatment = 0;
        medicRequired = QGVAR(surgicalAction);
        treatmentTime = QGVAR(openTime);
        items[] = {};
        condition = QUOTE([ARR_4(_medic, _patient, _bodyPart, 3.5)] call FUNC(openFractureCheck));
        patientStateCondition = 0;
        callbackSuccess = QUOTE([ARR_3(_medic, _patient, _bodyPart)] call FUNC(openFracture));
    };
    class Lidocaine: Carbonate {
        displayName = "Push Lidocaine";
        category = "surgery";
        treatmentLocations = 0;
        allowedSelections[] = {"Body", "LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        allowSelfTreatment = 0;
        medicRequired = 1;
        treatmentTime = QGVAR(PushTime);
        items[] = {"kat_lidocaine"};
        condition = QFUNC(removeIV);
        patientStateCondition = 0;
        callbackSuccess = "[_medic, _patient, _bodyPart, _className, _itemUser, _usedItem] call ace_medical_treatment_fnc_medication;";
    };
    class Etomidate: Carbonate {
        displayName = "Push Etomidate";
        category = "surgery";
        treatmentLocations = 0;
        allowedSelections[] = {"Body", "LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        allowSelfTreatment = 0;
        medicRequired = 1;
        treatmentTime = QGVAR(PushTime);
        items[] = {"kat_etomidate"};
        condition = QFUNC(removeIV);
        patientStateCondition = 0;
        callbackSuccess = "[_medic, _patient, _bodyPart, _className, _itemUser, _usedItem] call ace_medical_treatment_fnc_medication;";
    };
    class Lorazepam: Carbonate {
        displayName = "Push Lorazepam";
        category = "surgery";
        treatmentLocations = 0;
        allowedSelections[] = {"Body", "LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        allowSelfTreatment = 0;
        medicRequired = 1;
        treatmentTime = QGVAR(PushTime);
        items[] = {"kat_lorazepam"};
        condition = QFUNC(removeIV);
        patientStateCondition = 0;
        callbackSuccess = QUOTE([ARR_3(_player, _patient, 'Lorazepam')] call FUNC(treatmentAdvanced_Generic));
    };
    class Flumazenil: Carbonate {
        displayName = "Push Flumazenil";
        category = "surgery";
        treatmentLocations = 0;
        allowedSelections[] = {"Body", "LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        allowSelfTreatment = 0;
        medicRequired = 1;
        treatmentTime = QGVAR(PushTime);
        items[] = {"kat_flumazenil"};
        condition = QFUNC(removeIV);
        patientStateCondition = 0;
        callbackSuccess = QUOTE([ARR_3(_player, _patient, 'Flumazenil')] call FUNC(treatmentAdvanced_Generic));
    };
    class Expose: BasicBandage {
        displayName = "Expose fracture";
        displayNameProgress = "Exposing";
        category = "surgery";
        treatmentLocations = QGVAR(surgicalLocation);
        allowedSelections[] = {"LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        allowSelfTreatment = 0;
        medicRequired = QGVAR(surgicalAction);
        treatmentTime = QGVAR(surgicalTime);
        items[] = {"kat_retractor"};
        condition = QUOTE([ARR_4(_medic, _patient, _bodyPart, 2.1)] call FUNC(openFractureCheck));
        consumeItem = 0;
        patientStateCondition = 0;
        callbackSuccess = QUOTE([ARR_4(_medic, _patient, _bodyPart, 2.1)] call FUNC(openFractureProgress));
    };
    class Incision: BasicBandage {
        displayName = "Peform Incision";
        displayNameProgress = "Performing Incision";
        category = "surgery";
        treatmentLocations = QGVAR(surgicalLocation);
        allowedSelections[] = {"LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        allowSelfTreatment = 0;
        medicRequired = QGVAR(surgicalAction);
        treatmentTime = QGVAR(surgicalTime);
        items[] = {"kat_scalpel"};
        condition = QUOTE([ARR_4(_medic, _patient, _bodyPart, 5)] call FUNC(openFractureCheck));
        patientStateCondition = 0;
        callbackSuccess = QUOTE([ARR_3(_medic, _patient, _bodyPart)] call FUNC(openFractureIncision));
    };
    class Clamp: BasicBandage {
        displayName = "Clamp Fracture";
        displayNameProgress = "Clamping Fracture";
        category = "surgery";
        treatmentLocations = QGVAR(surgicalLocation);
        allowedSelections[] = {"LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        allowSelfTreatment = 0;
        medicRequired = QGVAR(surgicalAction);
        treatmentTime = QGVAR(surgicalTime);
        items[] = {"kat_clamp"};
        condition = QUOTE([ARR_4(_medic, _patient, _bodyPart, 3.3)] call FUNC(openFractureCheck));
        consumeItem = 0;
        patientStateCondition = 0;
        callbackSuccess = QUOTE([ARR_4(_medic, _patient, _bodyPart, 3.3)] call FUNC(openFractureProgress));
    };
    class Irrigate: BasicBandage {
        displayName = "Irrigate Wound";
        displayNameProgress = "Irrigating";
        category = "surgery";
        treatmentLocations = QGVAR(surgicalLocation);
        allowedSelections[] = {"LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        allowSelfTreatment = 0;
        medicRequired = QGVAR(surgicalAction);
        treatmentTime = QGVAR(surgicalTime);
        items[] = {"ACE_salineIV_250"};
        condition = QUOTE([ARR_4(_medic, _patient, _bodyPart, 2.3)] call FUNC(openFractureCheck));
        patientStateCondition = 0;
        callbackSuccess = QUOTE([ARR_4(_medic, _patient, _bodyPart, 2.3)] call FUNC(openFractureProgress));
    };
    class Debridement: BasicBandage {
        displayName = "Debride Wounds";
        displayNameProgress = "Debriding";
        category = "surgery";
        treatmentLocations = QGVAR(surgicalLocation);
        allowedSelections[] = {"Head", "Body", "LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        allowSelfTreatment = 0;
        medicRequired = QGVAR(surgicalAction);
        treatmentTime = 15;
        items[] = {"kat_scalpel"};
        condition = QUOTE([ARR_3(_medic, _patient, _bodyPart)] call FUNC(debridementCheck));
        consumeItem = 0;
        patientStateCondition = 0;
        callbackSuccess = QUOTE([ARR_3(_medic, _patient, _bodyPart)] call FUNC(debridementClear));
    };
    class NPWT: BasicBandage {
        displayName = "Apply NPWT Dressing";
        displayNameProgress = "Applying";
        category = "surgery";
        treatmentLocations = QGVAR(surgicalLocation);
        allowedSelections[] = {"Head", "Body", "LeftArm", "RightArm", "LeftLeg", "RightLeg"};
        allowSelfTreatment = 8;
        medicRequired = QGVAR(surgicalAction);
        treatmentTime = 8;
        items[] = {"kat_vacuum"};
        condition = QUOTE([ARR_3(_medic, _patient, _bodyPart)] call FUNC(debridementCheck));
        consumeItem = 0;
        patientStateCondition = 0;
        callbackStart = QUOTE([ARR_2(_medic, _patient)] call FUNC(debridementStart));
        callbackSuccess = QUOTE([ARR_3(_medic, _patient, _bodyPart)] call FUNC(debridementMinor));
    };
};